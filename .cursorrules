# 한슬 웹앱 개발 규칙

## 기본 원칙
- 절대 추측해서 작업하지 말 것
- 항상 step-by-step으로 진행
- 모든 변경사항은 되돌릴 수 있도록 진행

## 🚨 문제 해결 프로세스 규칙
### ❌ 절대 금지
- 사용자가 문제를 보고하거나 질문할 때 바로 코드 수정
- 원인 분석 없이 즉시 해결책 적용

### ✅ 올바른 프로세스
1. **문제 상황 분석**: 현재 상태와 문제점 파악
2. **원인 보고**: 왜 그런 문제가 발생했는지 설명
3. **해결 방안 제시**: 가능한 해결책들을 제안
4. **사용자 확인**: 어떤 방향으로 진행할지 확인
5. **코드 적용**: 사용자 승인 후 실제 수정 작업

### 🚀 예외 조건 (즉시 진행)
사용자가 다음과 같이 명시적으로 요청하는 경우 분석/보고 과정 생략하고 바로 적용:
- "바로 수정해줘" / "즉시 적용해줘"
- "알아서 해줘" / "그냥 진행해줘" 
- "분석 없이 바로 해줘"
- 기타 즉시 실행을 명시하는 표현들

**단, 즉시 적용 후에는 반드시 다음 사항들을 설명:**
- 무엇이 문제였는지 (원인)
- 어떤 변경을 했는지 (수정 내용)
- 왜 그렇게 수정했는지 (이유)

## 📋 MCP 도구 사용 매트릭스

### 필수 사용 도구 (반드시 사용)
- **🗂️ Filesystem MCP**: 코드 생성/수정 작업시 (필수)
- **🗄️ Supabase MCP**: DB 관련 작업/대화시 (필수)
- **🧠 Memorybank MCP**: 모든 대화에 기본 적용 (필수)
- **📚 Context7 MCP**: 코딩 작업 시 라이브러리 확인 (필수)

### 상황별 사용 도구
- **🤔 Sequential Thinking MCP**: 내용정리/복잡한 문제 해결시

## 🔄 올바른 코딩 워크플로우

```
1. 코딩 작업 시작
   ↓
2. Context7 MCP → 관련 라이브러리 검색/확인
   ↓  
3. 라이브러리 발견시 → 해당 라이브러리 활용 방법 학습
   ↓
4. Filesystem MCP → 라이브러리를 활용한 실제 코드 구현
```

### 🎯 Context7 MCP 핵심 원칙
- **코딩 전 필수 체크**: 모든 코딩 작업 시작 전 관련 라이브러리 존재 여부 확인
- **적극적 활용**: 적합한 라이브러리 발견시 반드시 활용하여 진행
- **효율성 확보**: 바닥부터 구현하지 말고 검증된 라이브러리 활용

## 🚨 데이터베이스 마이그레이션 필수 규칙

### ❌ 절대 금지
- 데이터베이스에서 직접 함수/트리거 수정
- Supabase 대시보드에서 SQL 직접 실행

### ✅ 올바른 프로세스
1. **마이그레이션 파일 수정**: `scripts/migrations/20250626b_update_purchase_notifications.sql`
2. **Supabase 마이그레이션**: SQL을 데이터베이스에 적용
3. **Git 커밋**: 변경사항 버전관리에 반영

### 마이그레이션 파일 관리
- 위치: `scripts/migrations/`
- 알림 시스템: `20250626b_update_purchase_notifications.sql`
- 명명 규칙: `YYYYMMDD[a-z]_description.sql`

### 현재 알림 시스템 상태
- 최종 결제 알림: 요청유형별 분리 (원자재→양승진, 소모품→황연순)
- 구매 요청 알림: 선진행/최종승인 시 Lead Buyer에게 알림

### 왜 마이그레이션 파일을 사용해야 하는가?
- 버전관리: Git에 모든 변경사항 기록
- 추적성: 언제 무엇이 변경되었는지 명확
- 재현성: 다른 환경에서도 동일 적용
- 롤백: 문제 시 이전 버전으로 복원

## 📊 Sequential Thinking MCP 필수 사용 상황

### 🎯 핵심 적용 시나리오
- 복잡한 문제의 단계적 분석
- 여러 하위 요소로 분해가 필요한 문제
- 계획/설계 작업의 수정이 빈번한 경우
- 전체 범위가 처음부터 불명확한 문제
- 다단계 솔루션이 필요한 문제
- 장기간 컨텍스트 유지가 필요한 작업
- 불필요한 정보 필터링이 필요한 상황

### 💡 활용 예시별 프로세스

**프로그래밍/알고리즘 설계**
```
문제정의 → 하위문제 분해 → 단계별 해결 → 결과 통합
```

**프로젝트 기획 및 관리**
```
목표설정 → 단계별 계획수립 → 실행/점검 → 결과분석 → 피드백/수정
```

**연구 및 분석**
```
문제정의 → 자료조사 → 데이터분석 → 결론도출
```

**복잡한 의사결정**
```
선택지 도출 → 장단점 분석 → 우선순위 결정 → 최종결정
```

## ✅ 에이전트 행동 체크리스트

### 🟢 작업 시작 전
- [ ] Context7 MCP로 관련 라이브러리 검색
- [ ] 추측 요소가 있는지 확인
- [ ] Step-by-step 계획 수립
- [ ] 필요시 Sequential Thinking MCP 활용

### 🟡 작업 진행 중
- [ ] 발견된 라이브러리 적극 활용
- [ ] 각 단계마다 결과 확인
- [ ] 불확실한 부분은 즉시 정보 수집
- [ ] 변경사항 추적 가능하게 기록
- [ ] Filesystem MCP로 실제 구현
- [ ] DB 작업시 Supabase MCP 활용

### 🔴 작업 완료 후
- [ ] 복원 가능성 확인
- [ ] 결과 검증
- [ ] Memorybank MCP에 진행사항 기록
- [ ] 다음 단계 준비

## 🎯 요약: 핵심 기억사항

1. **절대 추측하지 말 것** - 가장 중요
2. **코딩시 Context7 먼저** - 라이브러리 확인 후 활용
3. **모든 코드 작업은 Filesystem MCP** - 필수
4. **DB 작업은 Supabase MCP** - 필수  
5. **복잡한 문제는 Sequential Thinking MCP** - 체계적 접근
6. **모든 대화에 Memorybank MCP** - 기본 적용